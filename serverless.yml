# IMPORTANT: see in AWS Console what prefixes you used!!1 Otherwise it will not run!!!!
service: organisation

# Use the serverless-webpack plugin to transpile ES6
plugins:
  - serverless-webpack
  - serverless-offline

# serverless-webpack configuration
# Enable auto-packing of external modules
custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

provider:
  name: aws
  runtime: nodejs8.10
  stage: prod
  region: eu-west-1

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
        - ses:SendEmail
        - ses:SendRawEmail      
      Resource: "*"

      #"arn:aws:dynamodb:eu-west-1:*:table/*","arn:aws:ses:eu-west-1:289572371139:identity/roumenkpetrov@gmail.com"



functions:
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /organisation
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  create:
    handler: create.main
    events:
      - http:
          path: organisation
          method: post
          cors: true
          authorizer: aws_iam
  update:
    handler: update.main
    events:
      - http:
          path: organisation/{id}
          method: put
          cors: true
          authorizer: aws_iam
  delete:
    handler: delete.main
    events:
      - http:
          path: organisation/{id}
          method: delete
          cors: true
          authorizer: aws_iam
  get:
    handler: get.main
    events:
      - http:
          path: organisation/{id}
          method: get
          cors: true
          authorizer: aws_iam
  list:
    handler: list.main
    events:
      - http:
          path: organisation
          method: get
          cors: true
          authorizer: aws_iam
  adduser:
    handler: adduser.main
    events:
      - http:
          path: organisationadduser
          method: post
          cors: true
          authorizer: aws_iam  
  #adduserlookup:
  #  handler: adduserlookup.main
  #  events:
  #    - http:
  #       path: organisationadduserlookup
  #        method: post
  #        cors: true
  #        authorizer: aws_iam  

  confirmuser:
    handler: confirmuser.main
    events:
      - http:
          path: organisationconfirmuser
          method: put
          cors: true
          authorizer: aws_iam  
  removeuser:
    handler: removeuser.main
    events:
      - http:
          path: organisationremoveuser/{id}
          method: delete
          cors: true
          authorizer: aws_iam
#Test userManagement handler
  usermanagement:
    handler: handlers.userManagement
    events:
      - http:
          path: organisationusermanagement
          method: get
          cors: true
          authorizer: aws_iam   
  digestcreate:
    handler: digestcreate.main
    events:
      - http:
          path: organisationdigestcreate
          method: post
          cors: true
          authorizer: aws_iam   
#Test organisationStats handler
  organisationstats:
    handler: handlers.organisationStats
    events:
      - http:
          path: organisationstats
          method: get
          cors: true
          authorizer: aws_iam 
#Dummy organisationstats creation (test)          
  statscreate:
    handler: statscreate.main
    events:
      - http:
          path: organisationstatscreate
          method: post
          cors: true
          authorizer: aws_iam           